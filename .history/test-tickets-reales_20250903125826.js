const http = require('http');

const BASE_URL = 'localhost';
const PORT = 4000;

// Funci√≥n para hacer peticiones HTTP
function hacerPeticion(method, path, data) {
  return new Promise((resolve, reject) => {
    const postData = data ? JSON.stringify(data) : '';
    
    const options = {
      hostname: BASE_URL,
      port: PORT,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const response = JSON.parse(body);
          resolve(response);
        } catch (e) {
          resolve({ raw: body, status: res.statusCode });
        }
      });
    });

    req.on('error', (err) => {
      reject(err);
    });

    if (postData) {
      req.write(postData);
    }
    req.end();
  });
}

// Datos de prueba ID√âNTICOS a producci√≥n
const paraLlevarBrasas = {
  mesa: "franco2", // Nombre en lugar de n√∫mero = para llevar
  productos: [
    {
      nombre: "1/2 POLLO A LA BRASA",
      categoria: "brasas",
      cantidad: 1,
      precio: 25.50,
      observacion: "Bien dorado"
    }
  ],
  orden: "1756913083523", // Orden espec√≠fica
  hora: "12:24",          // Hora espec√≠fica
  fecha: "3/9/2025",      // Fecha espec√≠fica
  metodoPago: "efectivo"
};

async function probarParaLlevarBrasas() {
  console.log('\nüì¶ PROBANDO PARA LLEVAR CON BRASAS (PRODUCCI√ìN)...');
  console.log('Cliente:', paraLlevarBrasas.mesa);
  console.log('Productos:', paraLlevarBrasas.productos.map(p => `${p.nombre} (${p.categoria})`).join(', '));
  console.log('Orden:', paraLlevarBrasas.orden);
  console.log('Hora:', paraLlevarBrasas.hora);
  console.log('Fecha:', paraLlevarBrasas.fecha);
  console.log('Precio:', paraLlevarBrasas.productos[0].precio);
  
  try {
    const response = await hacerPeticion('POST', '/print', paraLlevarBrasas);
    console.log('‚úÖ Respuesta:', response);
    
    if (response.results) {
      console.log('üìã Resultados:');
      response.results.forEach((result, index) => {
        console.log(`  ${index + 1}. ${result}`);
      });
      
      // Verificar que las brasas vayan a ambas impresoras
      const tieneParrilla = response.results.some(r => r.includes('PARRILLA') || r.includes('192.168.1.101'));
      const tieneCocina = response.results.some(r => r.includes('COCINA') || r.includes('192.168.1.100'));
      
      console.log('üîç Verificaci√≥n:');
      console.log(`  ‚Ä¢ ¬øFue a PARRILLA? ${tieneParrilla ? '‚úÖ S√ç' : '‚ùå NO'}`);
      console.log(`  ‚Ä¢ ¬øFue a COCINA? ${tieneCocina ? '‚úÖ S√ç' : '‚ùå NO'}`);
      console.log(`  ‚Ä¢ ¬øBrasas a ambas? ${tieneParrilla && tieneCocina ? '‚úÖ CORRECTO' : '‚ùå INCORRECTO'}`);
      
      if (tieneParrilla && tieneCocina) {
        console.log('\nüéØ RESULTADO ESPERADO EN PRODUCCI√ìN:');
        console.log('  ‚Ä¢ COCINA: Ticket con "PARA LLEVAR", cliente "franco2"');
        console.log('  ‚Ä¢ PARRILLA: EXACTAMENTE EL MISMO TICKET con "PARA LLEVAR", cliente "franco2"');
        console.log('  ‚Ä¢ Ambos tickets deben mostrar:');
        console.log('    - Orden: 1756913083523');
        console.log('    - Hora: 12:24');
        console.log('    - Fecha: 3/9/2025');
        console.log('    - Total: $25.50');
        console.log('  ‚Ä¢ Los tickets deben ser COMPLETAMENTE ID√âNTICOS');
        
        console.log('\n‚ö†Ô∏è  PROBLEMA ANTERIOR:');
        console.log('  ‚Ä¢ PARRILLA mostraba "COCINA" y "MESA: undefined"');
        console.log('  ‚Ä¢ PARRILLA generaba orden/hora/fecha diferentes');
        console.log('  ‚Ä¢ Los tickets NO eran id√©nticos');
        
        console.log('\n‚úÖ SOLUCI√ìN IMPLEMENTADA:');
        console.log('  ‚Ä¢ generarTicketDelivery ahora acepta orden, hora, fecha');
        console.log('  ‚Ä¢ Se pasan los valores originales del pedido');
        console.log('  ‚Ä¢ Ambos tickets usan los mismos datos');
        console.log('  ‚Ä¢ Los tickets ahora S√ç son id√©nticos');
      }
    }
  } catch (error) {
    console.error('‚ùå Error en para llevar:', error.message);
  }
}

async function verificarEstado() {
  console.log('\nüîç VERIFICANDO ESTADO DEL SERVIDOR...');
  try {
    const response = await hacerPeticion('GET', '/status');
    console.log('‚úÖ Estado:', response);
  } catch (error) {
    console.error('‚ùå Error al verificar estado:', error.message);
  }
}

async function ejecutarPruebas() {
  console.log('üß™ INICIANDO PRUEBAS DE TICKETS ID√âNTICOS EN PRODUCCI√ìN');
  console.log('=' .repeat(70));
  
  // Verificar que el servidor est√© funcionando
  await verificarEstado();
  
  // Probar para llevar con brasas (debe ir a PARRILLA + COCINA con tickets ID√âNTICOS)
  await probarParaLlevarBrasas();
  
  console.log('\n' + '=' .repeat(70));
  console.log('üèÅ PRUEBAS COMPLETADAS');
  console.log('\nüìã COMPORTAMIENTO ESPERADO EN PRODUCCI√ìN:');
  console.log('‚Ä¢ PARA LLEVAR con brasas ‚Üí PARRILLA + COCINA');
  console.log('‚Ä¢ Ambos tickets deben mostrar "PARA LLEVAR"');
  console.log('‚Ä¢ Ambos tickets deben mostrar el cliente "franco2"');
  console.log('‚Ä¢ Ambos tickets deben mostrar la MISMA orden, hora, fecha y total');
  console.log('‚Ä¢ Los tickets deben ser COMPLETAMENTE ID√âNTICOS');
  console.log('\nüîß CAMBIOS IMPLEMENTADOS:');
  console.log('‚Ä¢ generarTicketDelivery ahora acepta par√°metros orden, hora, fecha');
  console.log('‚Ä¢ Se pasan los valores originales del pedido para mantener consistencia');
  console.log('‚Ä¢ Los tickets de PARRILLA y COCINA ahora son id√©nticos');
}

// Ejecutar pruebas
ejecutarPruebas().catch(console.error);
